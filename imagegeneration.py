{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyNV20z0P95wUcFX8keDZgvI"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["import warnings\n","\n","warnings.filterwarnings(\"ignore\")"],"metadata":{"id":"C9PCQ5Rx_LpW","executionInfo":{"status":"ok","timestamp":1719661403859,"user_tz":-330,"elapsed":734,"user":{"displayName":"Sechana T V","userId":"16448884573583873798"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["\n","from keras.datasets import mnist\n","\n","from keras.layers import *\n","from keras.layers import LeakyReLU\n","from keras.models import Sequential , Model\n","from keras.optimizers import Adam\n","\n","import numpy as np\n","import matplotlib.pyplot as plt"],"metadata":{"collapsed":true,"id":"D-rH0CFQ-Jju","executionInfo":{"status":"ok","timestamp":1719661397145,"user_tz":-330,"elapsed":750,"user":{"displayName":"Sechana T V","userId":"16448884573583873798"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["(x_train, _),(_,_)= mnist.load_data()"],"metadata":{"id":"q3ag91m6ALAQ","executionInfo":{"status":"ok","timestamp":1719661409149,"user_tz":-330,"elapsed":470,"user":{"displayName":"Sechana T V","userId":"16448884573583873798"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["x_train.shape\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pzCZwFNHApLz","executionInfo":{"status":"ok","timestamp":1719661412845,"user_tz":-330,"elapsed":471,"user":{"displayName":"Sechana T V","userId":"16448884573583873798"}},"outputId":"f893f6c3-c1a1-4fa3-97a6-c7d943207a4c"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(60000, 28, 28)"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["x_train = (x_train-127.5)/127.5\n","\n","print(x_train.min())\n","print(x_train.max())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Of5db9-aA2EX","executionInfo":{"status":"ok","timestamp":1719661416892,"user_tz":-330,"elapsed":11,"user":{"displayName":"Sechana T V","userId":"16448884573583873798"}},"outputId":"01aa5428-8b92-4b64-9222-7040b5646c7d"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["-1.0\n","1.0\n"]}]},{"cell_type":"code","source":["TOTAL_EPOCHS = 50\n","BATCH_SIZE = 256\n","HALF_BATCH = 128\n","\n","NO_OF_BATCHES = int(x_train.shape[0]/BATCH_SIZE)\n","\n","NOISE_DIM = 100\n","\n","adam = Adam(learning_rate = 2e-4 , beta_1 = 0.5)"],"metadata":{"id":"wMHpjlcrBKj7","executionInfo":{"status":"ok","timestamp":1719661421780,"user_tz":-330,"elapsed":791,"user":{"displayName":"Sechana T V","userId":"16448884573583873798"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["#generator model : upssampling\n","\n","generator = Sequential()\n","generator.add(Dense(units = 7*7*128, input_shape = (NOISE_DIM,)))\n","generator.add(Reshape((7,7,128)))\n","generator.add(LeakyReLU(0.2))\n","generator.add(BatchNormalization())\n","\n","#(7,7,128) -> (14,14,64)\n","\n","generator.add(Conv2DTranspose(64, (3,3), strides= (2,2), padding= 'same'))\n","generator.add(LeakyReLU(0.2))\n","generator.add(BatchNormalization())\n","\n","#(14,14,64) -> (28,28,1)\n","\n","generator.add(Conv2DTranspose(1, (3,3), strides= (2,2), padding= 'same', activation = 'tanh'))\n","generator.compile(loss = keras.losses.binary_crossentropy , optimizer = adam)\n","\n","generator.summary()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P1hBb6Q9CnTy","executionInfo":{"status":"ok","timestamp":1719661425943,"user_tz":-330,"elapsed":638,"user":{"displayName":"Sechana T V","userId":"16448884573583873798"}},"outputId":"6de6156b-ff48-47f8-94bd-269378bf1584"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," dense (Dense)               (None, 6272)              633472    \n","                                                                 \n"," reshape (Reshape)           (None, 7, 7, 128)         0         \n","                                                                 \n"," leaky_re_lu (LeakyReLU)     (None, 7, 7, 128)         0         \n","                                                                 \n"," batch_normalization (Batch  (None, 7, 7, 128)         512       \n"," Normalization)                                                  \n","                                                                 \n"," conv2d_transpose (Conv2DTr  (None, 14, 14, 64)        73792     \n"," anspose)                                                        \n","                                                                 \n"," leaky_re_lu_1 (LeakyReLU)   (None, 14, 14, 64)        0         \n","                                                                 \n"," batch_normalization_1 (Bat  (None, 14, 14, 64)        256       \n"," chNormalization)                                                \n","                                                                 \n"," conv2d_transpose_1 (Conv2D  (None, 28, 28, 1)         577       \n"," Transpose)                                                      \n","                                                                 \n","=================================================================\n","Total params: 708609 (2.70 MB)\n","Trainable params: 708225 (2.70 MB)\n","Non-trainable params: 384 (1.50 KB)\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["#discriminator model -> Down sampling\n","\n","#(28,28,1) -> (14,14,64)\n","\n","\n","descriminator = Sequential()\n","descriminator.add(Conv2D(64, kernel_size=(3,3),strides=(2,2), padding='same',input_shape = (28,28,1)))\n","\n","descriminator.add(LeakyReLU(0.2))\n","\n","#(14,14,64) -> (7,7,128)\n","\n","descriminator.add(Conv2D(128, kernel_size=(3,3),strides=(2,2), padding='same'))\n","\n","descriminator.add(LeakyReLU(0.2))\n","\n","#(7,7,128) --> 6272\n","descriminator.add(tf.keras.layers.Flatten())\n","descriminator.add(Dense(100))\n","descriminator.add(LeakyReLU(0.2))\n","\n","descriminator.add(Dense(1,activation = 'sigmoid'))\n","\n","adam = Adam(learning_rate = 2e-4 , beta_1 = 0.5)\n","descriminator.compile(loss = keras.losses.binary_crossentropy , optimizer= adam)\n","\n","descriminator.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8sVpFLRLmC4F","executionInfo":{"status":"ok","timestamp":1719661433960,"user_tz":-330,"elapsed":664,"user":{"displayName":"Sechana T V","userId":"16448884573583873798"}},"outputId":"f001ac65-7e59-4a98-bcd4-69010016720f"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d (Conv2D)             (None, 14, 14, 64)        640       \n","                                                                 \n"," leaky_re_lu_2 (LeakyReLU)   (None, 14, 14, 64)        0         \n","                                                                 \n"," conv2d_1 (Conv2D)           (None, 7, 7, 128)         73856     \n","                                                                 \n"," leaky_re_lu_3 (LeakyReLU)   (None, 7, 7, 128)         0         \n","                                                                 \n"," flatten (Flatten)           (None, 6272)              0         \n","                                                                 \n"," dense_1 (Dense)             (None, 100)               627300    \n","                                                                 \n"," leaky_re_lu_4 (LeakyReLU)   (None, 100)               0         \n","                                                                 \n"," dense_2 (Dense)             (None, 1)                 101       \n","                                                                 \n","=================================================================\n","Total params: 701897 (2.68 MB)\n","Trainable params: 701897 (2.68 MB)\n","Non-trainable params: 0 (0.00 Byte)\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["#combined model\n","\n","from keras.layers import Input\n","from keras.models import Model\n","descriminator.trainable = False\n","NOISE_DIM = 100\n","gan_input = Input(shape = (NOISE_DIM,))\n","generated_image = generator(gan_input)\n","gan_output = descriminator(generated_image)\n","\n","#Functional API\n","model = Model(gan_input, gan_output)\n","model.compile(loss = keras.losses.binary_crossentropy , optimizer = adam)\n","\n"],"metadata":{"id":"ma3szmG-nkRm","executionInfo":{"status":"ok","timestamp":1719661440149,"user_tz":-330,"elapsed":533,"user":{"displayName":"Sechana T V","userId":"16448884573583873798"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3AQ5ik2SpkG6","executionInfo":{"status":"ok","timestamp":1719641991814,"user_tz":-330,"elapsed":467,"user":{"displayName":"Sechana T V","userId":"16448884573583873798"}},"outputId":"4ee32599-844b-4854-da09-c918eb66e2d0"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"model\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," input_3 (InputLayer)        [(None, 100)]             0         \n","                                                                 \n"," sequential_6 (Sequential)   (None, 28, 28, 1)         708609    \n","                                                                 \n"," sequential_5 (Sequential)   (None, 1)                 701897    \n","                                                                 \n","=================================================================\n","Total params: 1410506 (5.38 MB)\n","Trainable params: 708225 (2.70 MB)\n","Non-trainable params: 702281 (2.68 MB)\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["(x_train, y_train), (x_test, y_test) = mnist.load_data()\n","x_train = x_train.reshape(-1,28,28,1)"],"metadata":{"id":"hKoAK2OPppeW","executionInfo":{"status":"ok","timestamp":1719661445155,"user_tz":-330,"elapsed":578,"user":{"displayName":"Sechana T V","userId":"16448884573583873798"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["x_train.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UgzhqfATquS1","executionInfo":{"status":"ok","timestamp":1719661449303,"user_tz":-330,"elapsed":642,"user":{"displayName":"Sechana T V","userId":"16448884573583873798"}},"outputId":"8468b911-dcac-49bd-b19c-e48edec08290"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(60000, 28, 28, 1)"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["def display_images(samples = 25):\n","  noise = np.random.normal(0,1,(samples,NOISE_DIM))\n","  generated_images = generator.predict(noise)\n","  plt.figure(figsize = (10,10))\n","  for i in range(samples):\n","    plt.subplot(5,5,i+1)\n","    plt.imshow(generated_images[i].reshape(28,28), cmap = \"binary\")\n","    plt.axis(\"off\")\n","  plt.show()"],"metadata":{"id":"0Ozy3CVlvcgU","executionInfo":{"status":"ok","timestamp":1719661453780,"user_tz":-330,"elapsed":463,"user":{"displayName":"Sechana T V","userId":"16448884573583873798"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["# Training loop\n","import numpy as np\n","from tensorflow.keras.datasets import mnist\n","\n","d_losses = []\n","g_losses = []\n","TOTAL_EPOCHS = 100\n","NO_OF_BATCHES = 32\n","HALF_BATCH = 16\n","NOISE_DIM = 100\n","BATCH_SIZE = 32\n","\n","# Load MNIST dataset\n","(x_train, y_train), (x_test, y_test) = mnist.load_data()\n","x_train = x_train.reshape(-1,28,28,1)\n","x_train = x_train.astype('float32') / 255.0\n","\n","for epoch in range(TOTAL_EPOCHS):\n","\n","  epoch_d_loss = 0\n","  epoch_g_loss = 0\n","\n","  #mini batch gradient descent\n","\n","  for step in range(NO_OF_BATCHES):\n","\n","    #====================================\n","    #step 1 train descriminator\n","    #descriminatortrainable = true\n","\n","    # get the real data\n","    idx = np.random.randint(0,6000,HALF_BATCH)\n","    real_images = x_train[idx]\n","\n","    #get the fake data\n","    noise = np.random.normal(0,1,(HALF_BATCH,NOISE_DIM))\n","    fake_images = generator.predict(noise)\n","\n","    #labels\n","    real_y = np.ones((HALF_BATCH,1))*0.9\n","    fake_y = np.zeros((HALF_BATCH,1))\n","\n","    #now , train D\n","\n","    d_loss_real = descriminator.train_on_batch(real_images,real_y)\n","    d_loss_fake = descriminator.train_on_batch(fake_images,fake_y)\n","\n","    d_loss = 0.5 * d_loss_real + 0.5 * d_loss_fake\n","\n","    epoch_d_loss += d_loss\n","\n","    #===================++++++++++++++=\n","    #step 2 train generator\n","\n","    #descriminatortrainable = false\n","    noise = np.random.normal(0,1,(BATCH_SIZE,NOISE_DIM))\n","    ground_truth_y = np.ones((BATCH_SIZE,1))\n","\n","\n","\n","    #==================================\n","\n","    print(f\"Epoch{epoch+1} Disc loss{epoch_d_loss/NO_OF_BATCHES}, Generator loss{epoch_g_loss/NO_OF_BATCHES}\")\n","\n","    d_losses.append(epoch_d_loss/NO_OF_BATCHES)\n","    g_losses.append(epoch_g_loss/NO_OF_BATCHES)\n","\n","\n","    if (epoch+1) % 10 == 0:\n","      generator.save(\"generator.h5\")\n","      display_images()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1w1SSUJgEz0QA7MtVKl691cN_t2o9lmsQ"},"id":"IYnV2teurBW-","outputId":"baf982fa-4f12-4543-be42-63c28e48273e"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]}]}